import Cartesian2 from"./Cartesian2.js";import Cartesian3 from"./Cartesian3.js";import Check from"./Check.js";import defined from"./defined.js";import DeveloperError from"./DeveloperError.js";import CesiumMath from"./Math.js";var RIGHT_SHIFT=1/256,LEFT_SHIFT=256,AttributeCompression={octEncodeInRange:function(e,t,o){Check.defined("vector",e),Check.defined("result",o);var r=Cartesian3.magnitudeSquared(e);if(Math.abs(r-1)>CesiumMath.EPSILON6)throw new DeveloperError("vector must be normalized.");if(o.x=e.x/(Math.abs(e.x)+Math.abs(e.y)+Math.abs(e.z)),o.y=e.y/(Math.abs(e.x)+Math.abs(e.y)+Math.abs(e.z)),e.z<0){var n=o.x,i=o.y;o.x=(1-Math.abs(i))*CesiumMath.signNotZero(n),o.y=(1-Math.abs(n))*CesiumMath.signNotZero(i)}return o.x=CesiumMath.toSNorm(o.x,t),o.y=CesiumMath.toSNorm(o.y,t),o},octEncode:function(e,t){return AttributeCompression.octEncodeInRange(e,255,t)}},octEncodeScratch=new Cartesian2,uint8ForceArray=new Uint8Array(1);function forceUint8(e){return uint8ForceArray[0]=e,uint8ForceArray[0]}AttributeCompression.octEncodeToCartesian4=function(e,t){return AttributeCompression.octEncodeInRange(e,65535,octEncodeScratch),t.x=forceUint8(octEncodeScratch.x*RIGHT_SHIFT),t.y=forceUint8(octEncodeScratch.x),t.z=forceUint8(octEncodeScratch.y*RIGHT_SHIFT),t.w=forceUint8(octEncodeScratch.y),t},AttributeCompression.octDecodeInRange=function(e,t,o,r){if(Check.defined("result",r),e<0||e>o||t<0||t>o)throw new DeveloperError("x and y must be unsigned normalized integers between 0 and "+o);if(r.x=CesiumMath.fromSNorm(e,o),r.y=CesiumMath.fromSNorm(t,o),r.z=1-(Math.abs(r.x)+Math.abs(r.y)),r.z<0){var n=r.x;r.x=(1-Math.abs(r.y))*CesiumMath.signNotZero(n),r.y=(1-Math.abs(n))*CesiumMath.signNotZero(r.y)}return Cartesian3.normalize(r,r)},AttributeCompression.octDecode=function(e,t,o){return AttributeCompression.octDecodeInRange(e,t,255,o)},AttributeCompression.octDecodeFromCartesian4=function(e,t){Check.typeOf.object("encoded",e),Check.typeOf.object("result",t);var o=e.x,r=e.y,n=e.z,i=e.w;if(o<0||o>255||r<0||r>255||n<0||n>255||i<0||i>255)throw new DeveloperError("x, y, z, and w must be unsigned normalized integers between 0 and 255");var c=o*LEFT_SHIFT+r,a=n*LEFT_SHIFT+i;return AttributeCompression.octDecodeInRange(c,a,65535,t)},AttributeCompression.octPackFloat=function(e){return Check.defined("encoded",e),256*e.x+e.y};var scratchEncodeCart2=new Cartesian2;function zigZagDecode(e){return e>>1^-(1&e)}AttributeCompression.octEncodeFloat=function(e){return AttributeCompression.octEncode(e,scratchEncodeCart2),AttributeCompression.octPackFloat(scratchEncodeCart2)},AttributeCompression.octDecodeFloat=function(e,t){Check.defined("value",e);var o=e/256,r=Math.floor(o),n=256*(o-r);return AttributeCompression.octDecode(r,n,t)},AttributeCompression.octPack=function(e,t,o,r){Check.defined("v1",e),Check.defined("v2",t),Check.defined("v3",o),Check.defined("result",r);var n=AttributeCompression.octEncodeFloat(e),i=AttributeCompression.octEncodeFloat(t),c=AttributeCompression.octEncode(o,scratchEncodeCart2);return r.x=65536*c.x+n,r.y=65536*c.y+i,r},AttributeCompression.octUnpack=function(e,t,o,r){Check.defined("packed",e),Check.defined("v1",t),Check.defined("v2",o),Check.defined("v3",r);var n=e.x/65536,i=Math.floor(n),c=65536*(n-i);n=e.y/65536;var a=Math.floor(n),s=65536*(n-a);AttributeCompression.octDecodeFloat(c,t),AttributeCompression.octDecodeFloat(s,o),AttributeCompression.octDecode(i,a,r)},AttributeCompression.compressTextureCoordinates=function(e){return Check.defined("textureCoordinates",e),4096*(4095*e.x|0)+(4095*e.y|0)},AttributeCompression.decompressTextureCoordinates=function(e,t){Check.defined("compressed",e),Check.defined("result",t);var o=e/4096,r=Math.floor(o);return t.x=r/4095,t.y=(e-4096*r)/4095,t},AttributeCompression.zigZagDeltaDecode=function(e,t,o){Check.defined("uBuffer",e),Check.defined("vBuffer",t),Check.typeOf.number.equals("uBuffer.length","vBuffer.length",e.length,t.length),defined(o)&&Check.typeOf.number.equals("uBuffer.length","heightBuffer.length",e.length,o.length);for(var r=e.length,n=0,i=0,c=0,a=0;a<r;++a)n+=zigZagDecode(e[a]),i+=zigZagDecode(t[a]),e[a]=n,t[a]=i,defined(o)&&(c+=zigZagDecode(o[a]),o[a]=c)};export default AttributeCompression;