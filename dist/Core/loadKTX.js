import when from"../ThirdParty/when.js";import Check from"./Check.js";import CompressedTextureBuffer from"./CompressedTextureBuffer.js";import defined from"./defined.js";import PixelFormat from"./PixelFormat.js";import Resource from"./Resource.js";import RuntimeError from"./RuntimeError.js";import WebGLConstants from"./WebGLConstants.js";function loadKTX(e){var r;(Check.defined("resourceOrUrlOrBuffer",e),e instanceof ArrayBuffer||ArrayBuffer.isView(e))?r=when.resolve(e):r=Resource.createIfNeeded(e).fetchArrayBuffer();if(defined(r))return r.then((function(e){if(defined(e))return parseKTX(e)}))}var fileIdentifier=[171,75,84,88,32,49,49,187,13,10,26,10],endiannessTest=67305985,faceOrder=["positiveX","negativeX","positiveY","negativeY","positiveZ","negativeZ"],sizeOfUint32=4;function parseKTX(e){var r,t,i,n=new Uint8Array(e),f=!0;for(r=0;r<fileIdentifier.length;++r)if(fileIdentifier[r]!==n[r]){f=!1;break}if(!f)throw new RuntimeError("Invalid KTX file.");defined(e.buffer)?(t=new DataView(e.buffer),i=e.byteOffset):(t=new DataView(e),i=0),i+=12;var s=t.getUint32(i,!0);if(i+=sizeOfUint32,s!==endiannessTest)throw new RuntimeError("File is the wrong endianness.");var o=t.getUint32(i,!0);i+=sizeOfUint32;var a=t.getUint32(i,!0);i+=sizeOfUint32;var m=t.getUint32(i,!0);i+=sizeOfUint32;var u=t.getUint32(i,!0);i+=sizeOfUint32;var d=t.getUint32(i,!0);i+=sizeOfUint32;var w=t.getUint32(i,!0);i+=sizeOfUint32;var U=t.getUint32(i,!0);i+=sizeOfUint32;var p=t.getUint32(i,!0);i+=sizeOfUint32;var v=t.getUint32(i,!0);i+=sizeOfUint32;var l=t.getUint32(i,!0);i+=sizeOfUint32;var h=t.getUint32(i,!0);i+=sizeOfUint32;var g=t.getUint32(i,!0);i+=sizeOfUint32,i+=g;var O,c=t.getUint32(i,!0);if(i+=sizeOfUint32,O=defined(e.buffer)?new Uint8Array(e.buffer,i,c):new Uint8Array(e,i,c),u===WebGLConstants.RGB8?u=PixelFormat.RGB:u===WebGLConstants.RGBA8&&(u=PixelFormat.RGBA),!PixelFormat.validate(u))throw new RuntimeError("glInternalFormat is not a valid format.");if(PixelFormat.isCompressedFormat(u)){if(0!==o)throw new RuntimeError("glType must be zero when the texture is compressed.");if(1!==a)throw new RuntimeError("The type size for compressed textures must be 1.");if(0!==m)throw new RuntimeError("glFormat must be zero when the texture is compressed.")}else{if(o!==WebGLConstants.UNSIGNED_BYTE)throw new RuntimeError("Only unsigned byte buffers are supported.");if(d!==m)throw new RuntimeError("The base internal format must be the same as the format for uncompressed textures.")}if(0!==p)throw new RuntimeError("3D textures are unsupported.");if(0!==v)throw new RuntimeError("Texture arrays are unsupported.");var x=O.byteOffset,b=new Array(h);for(r=0;r<h;++r){for(var z=b[r]={},R=0;R<l;++R){var y=w>>r,T=U>>r,B=PixelFormat.isCompressedFormat(u)?PixelFormat.compressedTextureSizeInBytes(u,y,T):PixelFormat.textureSizeInBytes(u,o,y,T),E=new Uint8Array(O.buffer,x,B);z[faceOrder[R]]=new CompressedTextureBuffer(u,y,T,E),x+=B}x+=3-(x+3)%4+4}var F=b;if(1===l)for(r=0;r<h;++r)F[r]=F[r][faceOrder[0]];return 1===h&&(F=F[0]),F}export default loadKTX;