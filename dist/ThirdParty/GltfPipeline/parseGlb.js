import addPipelineExtras from"./addPipelineExtras.js";import removeExtensionsUsed from"./removeExtensionsUsed.js";import defaultValue from"../../Core/defaultValue.js";import defined from"../../Core/defined.js";import getJsonFromTypedArray from"../../Core/getJsonFromTypedArray.js";import getMagic from"../../Core/getMagic.js";import RuntimeError from"../../Core/RuntimeError.js";var sizeOfUint32=4;function parseGlb(e){if("glTF"!==getMagic(e))throw new RuntimeError("File is not valid binary glTF");var r=readHeader(e,0,5),i=r[1];if(1!==i&&2!==i)throw new RuntimeError("Binary glTF version is not 1 or 2");return 1===i?parseGlbVersion1(e,r):parseGlbVersion2(e,r)}function readHeader(e,r,i){for(var n=new DataView(e.buffer),a=new Array(i),o=0;o<i;++o)a[o]=n.getUint32(e.byteOffset+r+o*sizeOfUint32,!0);return a}function parseGlbVersion1(e,r){var i=r[2],n=r[3];if(0!==r[4])throw new RuntimeError("Binary glTF scene format is not JSON");var a=20+n,o=getJsonFromTypedArray(e,20,n);addPipelineExtras(o);var t=e.subarray(a,i),s=o.buffers;if(defined(s)&&Object.keys(s).length>0){var f=defaultValue(s.binary_glTF,s.KHR_binary_glTF);defined(f)&&(f.extras._pipeline.source=t)}return removeExtensionsUsed(o,"KHR_binary_glTF"),o}function parseGlbVersion2(e,r){for(var i,n,a=r[2],o=12;o<a;){var t=readHeader(e,o,2),s=t[0],f=t[1];o+=8;var d=e.subarray(o,o+s);o+=s,1313821514===f?(i=getJsonFromTypedArray(d),addPipelineExtras(i)):5130562===f&&(n=d)}if(defined(i)&&defined(n)){var l=i.buffers;if(defined(l)&&l.length>0)l[0].extras._pipeline.source=n}return i}export default parseGlb;